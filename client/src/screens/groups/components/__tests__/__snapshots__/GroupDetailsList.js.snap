// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#EEE",
        "flex": 1,
        "flexDirection": "column",
        "justifyContent": "flex-start",
      },
    ]
  }
>
  <RCTScrollView
    ListHeaderComponent={[Function]}
    data={
      Array [
        Object {
          "__typename": "Schedule",
          "details": "details",
          "endTime": 1,
          "id": 2,
          "name": "name",
          "startTime": 0,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={undefined}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={true}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      />
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "white",
                  "borderRadius": 2,
                  "elevation": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginBottom": 0,
                  "marginLeft": 10,
                  "marginRight": 10,
                  "marginTop": 6,
                  "paddingBottom": 10,
                  "paddingLeft": 8,
                  "paddingRight": 8,
                  "paddingTop": 10,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                numberOfLines={1}
                style={
                  Object {
                    "flex": 0,
                    "fontWeight": "bold",
                    "includeFontPadding": false,
                    "marginRight": 8,
                    "textAlignVertical": "top",
                  }
                }
              >
                name
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                numberOfLines={2}
                style={
                  Object {
                    "color": "#6B6B6B",
                    "flex": 0,
                    "fontSize": 12,
                    "includeFontPadding": false,
                    "textAlignVertical": "bottom",
                  }
                }
              >
                Ongoing
              </Text>
            </View>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "paddingLeft": 8,
                  "width": 40,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={false}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 30,
                    },
                    Object {
                      "alignSelf": "center",
                    },
                    Object {
                      "fontFamily": "FontAwesome",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                  ]
                }
              >
                ÔÅ≥
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly 2`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#EEE",
        "flex": 1,
        "flexDirection": "column",
        "justifyContent": "flex-start",
      },
    ]
  }
>
  <RCTScrollView
    ListHeaderComponent={[Function]}
    data={
      Array [
        Object {
          "__typename": "Event",
          "details": "details",
          "id": 1,
          "name": "name",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={undefined}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={true}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      />
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "white",
                  "borderRadius": 2,
                  "elevation": 1,
                  "flexDirection": "row",
                  "justifyContent": "space-between",
                  "marginBottom": 0,
                  "marginLeft": 10,
                  "marginRight": 10,
                  "marginTop": 6,
                  "paddingBottom": 10,
                  "paddingLeft": 8,
                  "paddingRight": 8,
                  "paddingTop": 10,
                },
              ]
            }
          >
            <View
              style={
                Object {
                  "flex": 1,
                  "flexDirection": "column",
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                numberOfLines={1}
                style={
                  Object {
                    "flex": 0,
                    "fontWeight": "bold",
                    "includeFontPadding": false,
                    "marginRight": 8,
                    "textAlignVertical": "top",
                  }
                }
              >
                name
              </Text>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                numberOfLines={2}
                style={
                  Object {
                    "color": "#6B6B6B",
                    "flex": 0,
                    "fontSize": 12,
                    "includeFontPadding": false,
                    "textAlignVertical": "bottom",
                  }
                }
              >
                details
              </Text>
            </View>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "paddingLeft": 8,
                  "width": 40,
                }
              }
            >
              <Text
                accessible={true}
                allowFontScaling={false}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 30,
                    },
                    Object {
                      "alignSelf": "center",
                    },
                    Object {
                      "fontFamily": "FontAwesome",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                  ]
                }
              >
                ÔÇ°
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`renders correctly 3`] = `
<View
  style={
    Array [
      Object {
        "backgroundColor": "#EEE",
        "flex": 1,
        "flexDirection": "column",
        "justifyContent": "flex-start",
      },
    ]
  }
>
  <RCTScrollView
    ListHeaderComponent={[Function]}
    data={undefined}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={undefined}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={true}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
</View>
`;
